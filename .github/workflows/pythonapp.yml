name: Python application

on: [push, pull_request]

jobs:
  lint_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.x
      uses: actions/setup-python@v1
      with:
        python-version: 3.x
    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip virtualenv wheel setuptools
    - name: Lint with pycodestyle
      run: |
        python3 -m pip install flake8
        python3 -m flake8 . --count --ignore=E125,E126,E127,E128,E402,E741,E731,W503,F401,W504,F841 --show-source --statistics --max-line-length=80 --exclude=__pycache__,.tox,.git/,doc/

  linux_test:
    runs-on: ubuntu-latest
    env:
      DISPLAY: :99.0
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.x
      uses: actions/setup-python@v1
      with:
        python-version: 3.x
    - name: Make sdist
      run: python3 setup.py sdist --formats=gztar
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt -y install build-essential libgl1-mesa-dev libgles2-mesa-dev
        /sbin/start-stop-daemon --start --quiet --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 1280x720x24 -ac +extension GLX

        python3 -m pip install --upgrade pip virtualenv wheel setuptools
    - name: Install project
      run: python3 -m pip install -e .[dev]
    - name: Make wheel
      run: python3 setup.py bdist_wheel --universal
    - name: Upload wheels as artifact
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: dist
    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v0.1.14
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: dist/*
    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: "__token__"
        TWINE_PASSWORD: ${{ secrets.pypi_password }}
      run: |
        python -m pip install twine
        twine upload dist/*
    - name: Test with pytest
      run: |
        python3 -m pytest --cov=glitter2 --cov-report term --cov-branch glitter2/tests
    - name: Coveralls upload
      run: python3 -m coveralls
      env:
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}

  windows_test:
    runs-on: windows-latest
    env:
      KIVY_GL_BACKEND: angle_sdl2
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.x
      uses: actions/setup-python@v1
      with:
        python-version: 3.x
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip virtualenv wheel setuptools
        python -c "import os, PyInstaller; os.remove(os.path.join(os.path.dirname(PyInstaller.__file__), 'hooks', 'hook-kivy.py'))"
        python -m pip install -e .[dev]
    - name: Make PyInstaller app
      run: |
        cd packaging
        python -m PyInstaller Glitter2_exe.spec
    - name: Sign app
      env:
        PFX_CONTENT: ${{ secrets.BASE64_PFX_CONTENT }}
        PFX_PASSWORD: ${{ secrets.PFX_PASSWORD }}
      run: |
        $encodedBytes = [System.Convert]::FromBase64String($env:PFX_CONTENT)
        Set-Content cert.pfx -Value $encodedBytes -AsByteStream
        $sign = $(get-childitem "${env:ProgramFiles(x86)}\Windows Kits"\10\bin\*\x64\signtool.exe | Select-Object -first 1)
        "$sign" sign /f cert.pfx /p "$env:PFX_PASSWORD" /fd SHA256 packaging/dist/Glitter2.exe
    - name: Upload app as artifact
      uses: actions/upload-artifact@v2
      with:
        name: app
        path: packaging/dist
    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v0.1.14
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: packaging/dist/*
    - name: Test with pytest
      run: |
        python -m pytest --cov=glitter2 --cov-report term --cov-branch glitter2/tests

  osx_app:
    runs-on: macos-latest
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        arch: [ Intel, Apple ]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.x
    - name: Get Kivy dependencies
      run: |
        cd ..
        git clone https://github.com/kivy/kivy-sdk-packager.git
        cd kivy-sdk-packager/osx

        curl -O -L https://github.com/kivy/kivy/releases/download/2.1.0/Kivy.dmg
        hdiutil attach Kivy.dmg -mountroot .

        cp -R Kivy/Kivy.app Glitter2.app
    - name: Install Glitter pip dependencies
      run: |
        pushd ../kivy-sdk-packager/osx/Glitter2.app/Contents/Resources/venv/bin
        source activate
        popd

        if [[ ${{ matrix.arch }} = "Apple" ]]; then
          pip install --upgrade build
          mkdir wheels
          python -m build --wheel --outdir wheels --skip-dependency-check
          git clone https://github.com/kivy-garden/garden.git
          python -m build --wheel --outdir wheels --skip-dependency-check garden

          pip install wheels/glitter2*.whl https://github.com/matham/glitter2/releases/download/v0.1.0/tables-3.7.1.dev0-cp39-cp39-macosx_11_0_arm64.whl https://github.com/matham/glitter2/releases/download/v0.1.0/pyobjus-1.2.0-cp39-cp39-macosx_11_0_arm64.whl https://github.com/matham/glitter2/releases/download/v0.1.0/h5py-3.6.0-cp39-cp39-macosx_11_0_arm64.whl https://github.com/matham/glitter2/releases/download/v0.1.0/numexpr-2.8.2.dev1-cp39-cp39-macosx_11_0_arm64.whl --platform macosx_11_0_arm64 --only-binary=:all: --find-links wheels --target ../kivy-sdk-packager/osx/Glitter2.app/Contents/Resources/venv/lib/python*/site-packages
          mv ../kivy-sdk-packager/osx/Glitter2.app/Contents/Resources/venv/lib/python*/site-packages/bin/* ../kivy-sdk-packager/osx/Glitter2.app/Contents/Resources/venv/bin
        else
          python -m pip install https://github.com/kivy/pyobjus/archive/refs/heads/master.zip
          python -m pip install .
        fi
    - name: Finalize Glitter bundle
      run: |
        cd ../kivy-sdk-packager/osx

        pushd Glitter2.app/Contents/Resources/
        ln -s ./venv/bin/glitter2 yourapp
        popd

        ./fix-bundle-metadata.sh Glitter2.app -n Glitter2 -v "0.1.1.dev0" -a "Matthew Einhorn, CPL Lab" -o \
            "org.cpl.glitter2" -i "../../glitter2/doc/source/images/glitter2_icon.png"
        ./cleanup-app.sh Glitter2.app

        ./relocate.sh Glitter2.app
    - name: Create dmg
      run: |
        pushd ../kivy-sdk-packager/osx
        ./create-osx-dmg.sh Glitter2.app Glitter2
        popd

        mkdir osx_app
        cp ../kivy-sdk-packager/osx/Glitter2.dmg osx_app/Glitter2-${{ matrix.arch }}.dmg
    - name: Upload app as artifact
      uses: actions/upload-artifact@v2
      with:
        name: osx_app
        path: osx_app
    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v0.1.14
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: osx_app/*

  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.x
      uses: actions/setup-python@v2
      with:
        python-version: 3.x
    - name: Install dependencies
      env:
          KIVY_DOC_INCLUDE: 1
          KIVY_DOC: 1
      run: |
        python3 -m pip install --upgrade pip virtualenv wheel setuptools sphinx

        python3 -m pip install -e .[dev]
    - name: Generate docs
      env:
        TREE_CONFIG_DOC_YAML_PATH: config_prop_docs.yaml
        TREE_CONFIG_DOC_RST_PATH: source/config.rst
      run: |
        cd doc
        touch $TREE_CONFIG_DOC_RST_PATH  # file must exist before first run otherwise it doesn't show
        python -m tree_config.doc_gen download -u "https://matham.github.io/base_kivy_app/$TREE_CONFIG_DOC_YAML_PATH" -o $TREE_CONFIG_DOC_YAML_PATH

        make html  # generate config.rst file
        make html  # generate actual docs
        cp $TREE_CONFIG_DOC_YAML_PATH build/html
    - name: gh-pages upload
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cp -r doc/build/html ~/docs_temp

        git config --global user.email "moiein2000@gmail.com"
        git config --global user.name "Matthew Einhorn"
        git remote rm origin || true
        git remote add origin "https://x-access-token:${GITHUB_TOKEN}@github.com/matham/glitter2.git"

        git checkout --orphan gh-pages
        cp -r .git ~/docs_git
        cd ..
        rm -rf glitter2
        mkdir glitter2
        cd glitter2
        cp -r ~/docs_git .git
        cp -r ~/docs_temp/* .
        touch .nojekyll

        git add .
        git commit -a -m "Docs for git-$GITHUB_SHA"
        git push origin gh-pages -f
